# this file has been automatically created. Please do not edit it here
openapi: 3.0.0
info:
  title: "InfoMark"
  version: "0.0.1"
  description: >
    A CI based course framework. All enums should be send as strings and returned as strings.
    Everything
  contact:
    - name: Mark Boss
      email: mark.boss@uni-tuebingen.de
      url: https://uni-tuebingen.de
    - name: Patrick Wieschollek
      email: Patrick.Wieschollek@uni-tuebingen.de
      url: https://uni-tuebingen.de
servers:
  - url: http://localhost:2020/api/v1
security:
  - bearerAuth: []
  - cookieAuth: []
tags:
  - name: common
    description: common request
  - name: auth
    description: authenticated related requests
  - name: account
    description: account related requests
  - name: email
    description: Email related requests
  - name: users
    description: User related requests
  - name: courses
    description: Course related requests
  - name: sheets
    description: Exercise sheets related requests
  - name: tasks
    description: Exercise tasks related requests
  - name: submissions
    description: Submissions related requests
  - name: grades
    description: Gradings related requests
  - name: groups
    description: Exercise groups related requests
  - name: enrollments
    description: Enrollments related requests
  - name: materials
    description: Exercise material related requests
  - name: internal
    description: Endpoints for internal usage only
components:
  securitySchemes:
      bearerAuth:
        type: http
        scheme: bearer
        bearerFormat: JWT
      cookieAuth:
        type: apiKey
        in: cookie
        name: SESSIONID
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code
        - message
    # implementation in api/app/tape_test.go:34:6:
    JWTRequest:
      required:
    # implementation in api/app/user_requests.go:32:6:
    UserRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        email:
          type: string
          format: email
        student_number:
          type: string
        semester:
          type: integer
          minimum: 1
        subject:
          type: string
        language:
          type: string
          length: 2
        plain_password:
          type: string
          format: password
      required:
        - first_name
        - last_name
        - email
        - student_number
        - semester
        - subject
        - language
      example:
        email: test@unit-tuebingen.de
        student_number: 0815
        semester: 2
        subject: bio informatics
        language: en
        plain_password: new_password
        first_name: Max
        last_name: Mustermensch
    # implementation in api/app/user_requests.go:100:6:
    UserMeRequest:
      type: object
      properties:
        first_name:
          type: string
        last_name:
          type: string
        student_number:
          type: string
        semester:
          type: integer
          minimum: 1
        subject:
          type: string
        language:
          type: string
          length: 2
      required:
        - first_name
        - last_name
        - student_number
        - semester
        - subject
        - language
      example:
        first_name: Max
        last_name: Mustermensch
        student_number: 0815
        semester: 2
        subject: bio informatics
        language: en
    # implementation in api/app/grade_requests.go:33:6:
    GradeRequest:
      type: object
      properties:
        acquired_points:
          type: integer
        feedback:
          type: string
      required:
        - acquired_points
        - feedback
      example:
        acquired_points: 13
        feedback: Das war gut
    # implementation in api/app/grade_requests.go:64:6:
    GradeFromWorkerRequest:
      type: object
      properties:
        log:
          type: string
        status:
        enqueued_at:
          type: string
          format: date-time
        started_at:
          type: string
          format: date-time
        finished_at:
          type: string
          format: date-time
      required:
        - log
        - status
        - enqueued_at
        - started_at
        - finished_at
      example:
        finished_at: '2019-07-30T23:59:59Z'
        log: failed in line ...
        enqueued_at: '2019-07-30T23:59:59Z'
        started_at: '2019-07-30T23:59:59Z'
    # implementation in api/app/course_requests.go:31:6:
    CourseRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        begins_at:
          type: string
          format: date-time
        ends_at:
          type: string
          format: date-time
        required_percentage:
          type: integer
      required:
        - name
        - description
        - begins_at
        - ends_at
        - required_percentage
      example:
        name: Info 2
        description: An example course.
        begins_at: '2019-07-30T23:59:59Z'
        ends_at: '2019-07-30T23:59:59Z'
        required_percentage: 80
    # implementation in api/app/course_requests.go:79:6:
    ChangeRoleInCourseRequest:
      type: object
      properties:
        role:
          type: integer
      required:
        - role
      example:
        role: 0
    # implementation in api/app/exam_requests.go:31:6:
    ExamRequest:
      type: object
      properties:
        name:
          type: string
        description:
          type: string
        exam_time:
          type: string
          format: date-time
      required:
        - name
        - description
        - exam_time
      example:
        name: Info 2
        description: An example exam.
        exam_time: '2019-07-30T23:59:59Z'
    # implementation in api/app/exam_requests.go:63:6:
    UserExamRequest:
      type: object
      properties:
        status:
          type: integer
        mark:
          type: string
        user_id:
          type: integer
          format: int64
      required:
        - status
        - mark
        - user_id
      example:
        status: 1
        mark: 1
        user_id: 42
    # implementation in api/app/shared_request_payloads.go:29:6:
    EmailRequest:
      type: object
      properties:
        subject:
          type: string
        body:
          type: string
      required:
        - subject
        - body
      example:
        subject: Switch to another day
        body: Xmax will be from now on on 26th of Nov.
    # implementation in api/app/auth_requests.go:32:6:
    LoginRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        plain_password:
          type: string
          format: password
      required:
        - email
        - plain_password
      example:
        email: test@uni-tuebingen.de
        plain_password: test
    # implementation in api/app/auth_requests.go:51:6:
    ResetPasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
      required:
        - email
      example:
        email: test@uni-tuebingen.de
    # implementation in api/app/auth_requests.go:65:6:
    UpdatePasswordRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        reset_password_token:
          type: string
          format: password
        plain_password:
          type: string
          format: password
      required:
        - email
        - reset_password_token
        - plain_password
      example:
        plain_password: test
        email: test@uni-tuebingen.de
        reset_password_token: SDFOI34FZH4HUFH
    # implementation in api/app/auth_requests.go:83:6:
    ConfirmEmailRequest:
      type: object
      properties:
        email:
          type: string
          format: email
        confirmation_token:
          type: string
      required:
        - email
        - confirmation_token
      example:
        confirmation_token: SDFOI34FZH4HUFH
        email: test@uni-tuebingen.de
    # implementation in api/app/material_requests.go:31:6:
    MaterialRequest:
      type: object
      properties:
        name:
          type: string
        kind:
          type: integer
        publish_at:
          type: string
          format: date-time
        lecture_at:
          type: string
          format: date-time
        required_role:
          type: integer
      required:
        - name
        - kind
        - publish_at
        - lecture_at
        - required_role
      example:
        name: Einfuehrung
        kind: 1
        publish_at: '2019-07-30T23:59:59Z'
        lecture_at: '2019-07-30T23:59:59Z'
        required_role: 1
    # implementation in api/app/task_requests.go:30:6:
    TaskRequest:
      type: object
      properties:
        max_points:
          type: integer
        name:
          type: string
        public_docker_image:
          type: string
        private_docker_image:
          type: string
      required:
        - max_points
        - name
        - public_docker_image
        - private_docker_image
      example:
        max_points: 25
        name: Task 1
        public_docker_image: DefaultJavaTestingImage
        private_docker_image: DefaultJavaTestingImage
    # implementation in api/app/task_rating_requests.go:28:6:
    TaskRatingRequest:
      type: object
      properties:
        rating:
          type: integer
      required:
        - rating
      example:
        rating: 2
    # implementation in api/app/sheet_requests.go:31:6:
    SheetRequest:
      type: object
      properties:
        name:
          type: string
        publish_at:
          type: string
          format: date-time
        due_at:
          type: string
          format: date-time
      required:
        - name
        - publish_at
        - due_at
      example:
        due_at: '2019-07-30T23:59:59Z'
        name: Blatt 42
        publish_at: '2019-07-30T23:59:59Z'
    # implementation in api/app/group_requests.go:30:6:
    GroupRequest:
      type: object
      properties:
        tutor:
          type: object
          properties:
            id:
              type: integer
              format: int64
          required:
            - id
          example:
            id: 1
        description:
          type: string
      required:
        - tutor
        - description
      example:
        description: Gruppe fuer ersties am Montag im Raum C25435
    # implementation in api/app/group_requests.go:74:6:
    GroupBidRequest:
      type: object
      properties:
        bid:
          type: integer
          minimum: 0
          maximum: 10
      required:
        - bid
      example:
        bid: 5
    # implementation in api/app/group_requests.go:95:6:
    GroupEnrollmentRequest:
      type: object
      properties:
        user_id:
          type: integer
          format: int64
      required:
        - user_id
      example:
        user_id: 15
    # implementation in api/app/account_requests.go:35:6:
    CreateUserAccountRequest:
      type: object
      properties:
        user:
          type: object
          properties:
            first_name:
              type: string
            last_name:
              type: string
            email:
              type: string
              format: email
            student_number:
              type: string
            semester:
              type: integer
              minimum: 1
            subject:
              type: string
            language:
              type: string
              length: 2
          required:
            - first_name
            - last_name
            - email
            - student_number
            - semester
            - subject
            - language
          example:
            language: en
            first_name: Max
            last_name: Mustermensch
            email: test@uni-tuebingen.de
            student_number: 0815
            semester: 15
            subject: computer science
        account:
          type: object
          properties:
            email:
              type: string
              format: email
            plain_password:
              type: string
              format: password
          required:
            - email
            - plain_password
          example:
            email: test@uni-tuebingen.de
            plain_password: test
      required:
        - user
        - account
    # implementation in api/app/account_requests.go:132:6:
    AccountRequest:
      type: object
      properties:
        account:
          type: object
          properties:
            email:
              type: string
              format: email
            plain_password:
              type: string
              format: password
          required:
          example:
            email: other@example.com
            plain_password: new_password
        old_plain_password:
          type: string
          format: password
      required:
        - account
        - old_plain_password
      example:
        old_plain_password: old_password
    # implementation in api/app/task_rating_responses.go:29:6:
    TaskRatingResponse:
      type: object
      properties:
        task_id:
          type: integer
          format: int64
        average_rating:
          type: number
          format: float32
        own_rating:
          type: integer
      required:
        - task_id
        - average_rating
        - own_rating
      example:
        task_id: 143
        average_rating: 3.15
        own_rating: 4
    # implementation in api/app/group_responses.go:31:6:
    GroupResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        course_id:
          type: integer
          format: int64
        description:
          type: string
        tutor:
          type: object
          properties:
            id:
              type: integer
              format: int64
            first_name:
              type: string
            last_name:
              type: string
            avatar_url:
              type: string
            email:
              type: string
              format: email
            language:
              type: string
              length: 2
            student_number:
              type: string
            semester:
              type: integer
              minimum: 1
            subject:
              type: string
            root:
              type: boolean
          required:
            - id
            - first_name
            - last_name
            - email
            - language
            - student_number
            - semester
            - subject
            - root
          example:
            student_number: 0815
            id: 1
            first_name: Max
            language: en
            semester: 2
            subject: bio informatics
            root: false
            last_name: Mustermensch
            email: test@unit-tuebingen.de
      required:
        - id
        - course_id
        - description
        - tutor
      example:
        id: 9841
        course_id: 1
        description: Group every tuesday in room e43
    # implementation in api/app/group_responses.go:118:6:
    GroupBidResponse:
      type: object
      properties:
        bid:
          type: integer
          minimum: 0
          maximum: 10
      required:
        - bid
      example:
        bid: 4
    # implementation in api/app/task_responses.go:34:6:
    TaskResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        max_points:
          type: integer
        public_docker_image:
          type: string
        private_docker_image:
          type: string
      required:
        - id
        - name
        - max_points
      example:
        id: 684
        name: Task 1
        max_points: 23
    # implementation in api/app/task_responses.go:68:6:
    MissingTaskResponse:
      type: object
      properties:
        task:
          type: object
          properties:
            id:
              type: integer
              format: int64
            name:
              type: string
            max_points:
              type: integer
            public_docker_image:
              type: string
            private_docker_image:
              type: string
          required:
            - id
            - name
            - max_points
          example:
            id: 684
            name: Task 1
            max_points: 23
        course_id:
          type: integer
          format: int64
        sheet_id:
          type: integer
          format: int64
      required:
        - task
        - course_id
        - sheet_id
      example:
        course_id: 1
        sheet_id: 8
    # implementation in api/app/exam_responses.go:29:6:
    ExamResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        exam_time:
          type: string
          format: date-time
        course_id:
          type: integer
          format: int64
      required:
        - id
        - name
        - description
        - exam_time
        - course_id
      example:
        exam_time: '2019-07-30T23:59:59Z'
        course_id: 1
        id: 1
        name: Info2
        description: Some course description here
    # implementation in api/app/exam_responses.go:63:6:
    ExamEnrollmentResponse:
      type: object
      properties:
        status:
          type: integer
        mark:
          type: string
        user_id:
          type: integer
          format: int64
        course_id:
          type: integer
          format: int64
        exam_id:
          type: integer
          format: int64
      required:
        - status
        - mark
        - user_id
        - course_id
        - exam_id
      example:
        status: 1
        mark: 1
        user_id: 42
        course_id: 1
        exam_id: 1
    # implementation in api/app/auth_responses.go:26:6:
    AuthResponse:
      type: object
      properties:
        access:
          type: object
          properties:
            token:
              type: string
          required:
            - token
          example:
            token: eyJhbGciOiJIUzI1...rZikwLEI7XhY
        refresh:
          type: object
          properties:
            token:
              type: string
          required:
            - token
          example:
            token: eyJhbGciOiJIUzI1...EYCBjslOydswU
      required:
        - access
        - refresh
    # implementation in api/app/auth_responses.go:40:6:
    loginResponse:
      type: object
      properties:
        root:
          type: boolean
      required:
        - root
      example:
        root: false
    # implementation in api/app/submission_responses.go:34:6:
    SubmissionResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        task_id:
          type: integer
          format: int64
        file_url:
          type: string
      required:
        - id
        - user_id
        - task_id
        - file_url
      example:
        id: 61
        user_id: 357
        task_id: 12
        file_url: /api/v1/submissions/61/file
    # implementation in api/app/grade_responses.go:37:6:
    GradeResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        public_execution_state:
          type: integer
        private_execution_state:
          type: integer
        public_test_log:
          type: string
        private_test_log:
          type: string
        public_test_status:
          type: integer
        private_test_status:
          type: integer
        acquired_points:
          type: integer
        feedback:
          type: string
        tutor_id:
          type: integer
          format: int64
        submission_id:
          type: integer
          format: int64
        file_url:
          type: string
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
            first_name:
              type: string
            last_name:
              type: string
            email:
              type: string
              format: email
          required:
            - id
            - first_name
            - last_name
            - email
          example:
            last_name: Mustermensch
            email: test@unit-tuebingen.de
            id: 1
            first_name: Max
      required:
        - id
        - public_execution_state
        - private_execution_state
        - public_test_log
        - private_test_log
        - public_test_status
        - private_test_status
        - acquired_points
        - feedback
        - tutor_id
        - submission_id
        - file_url
        - user
      example:
        private_test_status: 0
        feedback: Some feedback
        file_url: /api/v1/submissions/61/file
        public_test_log: Lorem Ipsum
        private_test_log: Lorem Ipsum
        public_test_status: 1
        acquired_points: 19
        tutor_id: 2
        id: 1
        public_execution_state: 1
        private_execution_state: 1
        submission_id: 31
    # implementation in api/app/grade_responses.go:116:6:
    MissingGradeResponse:
      type: object
      properties:
        grade:
          type: object
          properties:
            id:
              type: integer
              format: int64
            public_execution_state:
              type: integer
            private_execution_state:
              type: integer
            public_test_log:
              type: string
            private_test_log:
              type: string
            public_test_status:
              type: integer
            private_test_status:
              type: integer
            acquired_points:
              type: integer
            feedback:
              type: string
            tutor_id:
              type: integer
              format: int64
            submission_id:
              type: integer
              format: int64
            file_url:
              type: string
            user:
              type: object
              properties:
                id:
                  type: integer
                  format: int64
                first_name:
                  type: string
                last_name:
                  type: string
                email:
                  type: string
                  format: email
              required:
                - id
                - first_name
                - last_name
                - email
              example:
                id: 1
                first_name: Max
                last_name: Mustermensch
                email: test@unit-tuebingen.de
          required:
            - id
            - public_execution_state
            - private_execution_state
            - public_test_log
            - private_test_log
            - public_test_status
            - private_test_status
            - acquired_points
            - feedback
            - tutor_id
            - submission_id
            - file_url
            - user
          example:
            private_test_log: Lorem Ipsum
            public_test_status: 1
            acquired_points: 19
            feedback: Some feedback
            tutor_id: 2
            file_url: /api/v1/submissions/61/file
            id: 1
            public_execution_state: 1
            private_execution_state: 1
            public_test_log: Lorem Ipsum
            private_test_status: 0
            submission_id: 31
        course_id:
          type: integer
          format: int64
        sheet_id:
          type: integer
          format: int64
        task_id:
          type: integer
          format: int64
      required:
        - grade
        - course_id
        - sheet_id
        - task_id
      example:
        course_id: 1
        sheet_id: 10
        task_id: 2
    # implementation in api/app/grade_responses.go:242:6:
    GradeOverviewResponse:
      type: object
      properties:
        sheets:
        achievements:
      required:
        - sheets
        - achievements
    # implementation in api/app/material_responses.go:34:6:
    MaterialResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        file_url:
          type: string
        kind:
          type: integer
        publish_at:
          type: string
          format: date-time
        lecture_at:
          type: string
          format: date-time
        required_role:
          type: integer
      required:
        - id
        - name
        - file_url
        - kind
        - publish_at
        - lecture_at
        - required_role
      example:
        kind: 0
        publish_at: '2019-07-30T23:59:59Z'
        lecture_at: '2019-07-30T23:59:59Z'
        required_role: 1
        id: 55
        name: Schleifen und Bedingungen
        file_url: /api/v1/materials/55/file
    # implementation in api/app/user_responses.go:33:6:
    UserResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        first_name:
          type: string
        last_name:
          type: string
        avatar_url:
          type: string
        email:
          type: string
          format: email
        student_number:
          type: string
        semester:
          type: integer
          minimum: 1
        subject:
          type: string
        language:
          type: string
          length: 2
        root:
          type: boolean
      required:
        - id
        - first_name
        - last_name
        - email
        - student_number
        - semester
        - subject
        - language
        - root
      example:
        id: 1
        first_name: Max
        last_name: Mustermensch
        email: test@unit-tuebingen.de
        student_number: 0815
        semester: 2
        root: false
        subject: bio informatics
        language: en
    # implementation in api/app/common_responses.go:29:6:
    RawResponse:
      type: object
      properties:
        text:
          type: string
      required:
        - text
      example:
        text: some text
    # implementation in api/app/common_responses.go:46:6:
    VersionResponse:
      type: object
      properties:
        commit:
          type: string
        version:
          type: string
      required:
        - commit
        - version
      example:
        commit: d725269a8a7498aae1dbb07786bed4c88b002661
        version: 1
    # implementation in api/app/course_responses.go:32:6:
    CourseResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        description:
          type: string
        begins_at:
          type: string
          format: date-time
        ends_at:
          type: string
          format: date-time
        required_percentage:
          type: integer
      required:
        - id
        - name
        - description
        - begins_at
        - ends_at
        - required_percentage
      example:
        required_percentage: 80
        id: 1
        name: Info2
        description: Some course description here
        begins_at: '2019-07-30T23:59:59Z'
        ends_at: '2019-07-30T23:59:59Z'
    # implementation in api/app/course_responses.go:68:6:
    SheetPointsResponse:
      type: object
      properties:
        acquired_points:
          type: integer
        max_points:
          type: integer
        sheet_id:
          type: integer
      required:
        - acquired_points
        - max_points
        - sheet_id
      example:
        acquired_points: 58
        max_points: 90
        sheet_id: 2
    # implementation in api/app/course_responses.go:98:6:
    GroupBidsResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        user_id:
          type: integer
          format: int64
        group_id:
          type: integer
          format: int64
        bid:
          type: integer
          minimum: 0
          maximum: 10
      required:
        - id
        - user_id
        - group_id
        - bid
      example:
        user_id: 112
        group_id: 2
        bid: 6
        id: 512
    # implementation in api/app/course_responses.go:132:6:
    EnrollmentResponse:
      type: object
      properties:
        role:
          type: integer
          format: int64
        user:
          type: object
          properties:
            id:
              type: integer
              format: int64
            first_name:
              type: string
            last_name:
              type: string
            avatar_url:
              type: string
            email:
              type: string
              format: email
            student_number:
              type: string
            semester:
              type: integer
              minimum: 1
            subject:
              type: string
            language:
              type: string
              length: 2
          required:
            - id
            - first_name
            - last_name
            - email
            - student_number
            - semester
            - subject
            - language
          example:
            id: 13
            first_name: Max
            last_name: Mustermensch
            email: test@uni-tuebingen.de
            student_number: 0816
            semester: 8
            subject: informatik
            language: de
      required:
        - role
        - user
      example:
        role: 1
    # implementation in api/app/errors.go:30:6:
    ErrResponse:
      type: object
      properties:
        status:
          type: string
        code:
          type: integer
          format: int64
        error:
          type: string
        errors:
      required:
        - status
        - code
        - error
        - errors
    # implementation in api/app/sheet_responses.go:34:6:
    SheetResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        name:
          type: string
        file_url:
          type: string
        publish_at:
          type: string
          format: date-time
        due_at:
          type: string
          format: date-time
      required:
        - id
        - name
        - file_url
        - publish_at
        - due_at
      example:
        publish_at: '2019-07-30T23:59:59Z'
        due_at: '2019-07-30T23:59:59Z'
        id: 13
        name: Blatt 0
        file_url: /api/v1/sheets/13/file
    # implementation in api/app/sheet_responses.go:72:6:
    TaskPointsResponse:
      type: object
      properties:
        acquired_points:
          type: integer
        max_points:
          type: integer
        task_id:
          type: integer
      required:
        - acquired_points
        - max_points
        - task_id
      example:
        acquired_points: 58
        max_points: 90
        task_id: 2
    # implementation in api/app/account_responses.go:30:6:
    UserEnrollmentResponse:
      type: object
      properties:
        id:
          type: integer
          format: int64
        course_id:
          type: integer
          format: int64
        role:
          type: integer
          format: int64
      required:
        - id
        - course_id
        - role
      example:
        course_id: 1
        role: 1
        id: 31
  responses:
    pongResponse:
      description: Server is up and running
      content:
        text/plain:
          schema:
            type: string
            example: pong
    ZipFile:
      description: A file as a download.
      content:
        application/zip:
          schema:
            type: string
            format: binary
    ImageFile:
      description: A file as a download.
      content:
        image/jpeg:
          schema:
            type: string
            format: binary
    OK:
      description: Post successfully delivered.
    NoContent:
      description: Update was successful.
    BadRequest:
      description: The request is in a wrong format or contains missing fields.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthenticated:
      description: User is not logged in.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    Unauthorized:
      description: User is logged in but has not the permission to perform the request.
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Error"
    # implementation in api/app/task_rating_responses.go:29:6:
    TaskRatingResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaskRatingResponse"
    # implementation in api/app/group_responses.go:31:6:
    GroupResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupResponse"
    # implementation in api/app/group_responses.go:118:6:
    GroupBidResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupBidResponse"
    # implementation in api/app/auth_responses.go:26:6:
    AuthResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/AuthResponse"
    # implementation in api/app/auth_responses.go:40:6:
    loginResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/loginResponse"
    # implementation in api/app/task_responses.go:34:6:
    TaskResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaskResponse"
    # implementation in api/app/task_responses.go:68:6:
    MissingTaskResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MissingTaskResponse"
    # implementation in api/app/exam_responses.go:29:6:
    ExamResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExamResponse"
    # implementation in api/app/exam_responses.go:63:6:
    ExamEnrollmentResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ExamEnrollmentResponse"
    # implementation in api/app/grade_responses.go:37:6:
    GradeResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GradeResponse"
    # implementation in api/app/grade_responses.go:116:6:
    MissingGradeResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MissingGradeResponse"
    # implementation in api/app/grade_responses.go:242:6:
    GradeOverviewResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GradeOverviewResponse"
    # implementation in api/app/submission_responses.go:34:6:
    SubmissionResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SubmissionResponse"
    # implementation in api/app/material_responses.go:34:6:
    MaterialResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/MaterialResponse"
    # implementation in api/app/user_responses.go:33:6:
    UserResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserResponse"
    # implementation in api/app/common_responses.go:29:6:
    RawResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/RawResponse"
    # implementation in api/app/common_responses.go:46:6:
    VersionResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/VersionResponse"
    # implementation in api/app/course_responses.go:32:6:
    CourseResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/CourseResponse"
    # implementation in api/app/course_responses.go:68:6:
    SheetPointsResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SheetPointsResponse"
    # implementation in api/app/course_responses.go:98:6:
    GroupBidsResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/GroupBidsResponse"
    # implementation in api/app/course_responses.go:132:6:
    EnrollmentResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/EnrollmentResponse"
    # implementation in api/app/sheet_responses.go:34:6:
    SheetResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/SheetResponse"
    # implementation in api/app/sheet_responses.go:72:6:
    TaskPointsResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/TaskPointsResponse"
    # implementation in api/app/errors.go:30:6:
    ErrResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/ErrResponse"
    # implementation in api/app/account_responses.go:30:6:
    UserEnrollmentResponse:
      description: done
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/UserEnrollmentResponse"
    MaterialResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/MaterialResponse"
    GroupResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GroupResponse"
    UserEnrollmentResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserEnrollmentResponse"
    ExamEnrollmentResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ExamEnrollmentResponse"
    CourseResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/CourseResponse"
    NewTaskListResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/NewTaskListResponse"
    MissingTaskResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/MissingTaskResponse"
    UserResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/UserResponse"
    GradeResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GradeResponse"
    TaskResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/TaskResponse"
    EnrollmentResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/EnrollmentResponse"
    GroupBidsResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/GroupBidsResponse"
    SubmissionResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SubmissionResponse"
    SheetPointsResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SheetPointsResponse"
    ExamResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/ExamResponse"
    SheetResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/SheetResponse"
    MissingGradeResponseList:
      description: done
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/MissingGradeResponse"
paths:
  /users:
    # implementation in  api/app/user.go:61:1
    get:
      summary: Get own user details (requires root)
      tags: 

        - users
      responses:
        "200":
          $ref: "#/components/responses/UserResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /courses/{course_id}/bids:
    # implementation in  api/app/course.go:568:1
    get:
      summary: get all bids for the request identity in a course
      tags: 

        - courses
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/GroupBidsResponseList"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/exams:
    # implementation in  api/app/exam.go:55:1
    get:
      summary: list all exams
      tags: 

        - exams
      responses:
        "200":
          $ref: "#/components/responses/ExamResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/exam.go:81:1
    post:
      summary: create a new exam
      tags: 

        - exams
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamRequest"
      responses:
        "204":
          $ref: "#/components/responses/ExamResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/tasks/{task_id}/ratings:
    # implementation in  api/app/task_rating.go:54:1
    get:
      summary: get all stats (average rating, own rating, ..) for a task
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/TaskRatingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/task_rating.go:98:1
    post:
      summary: updates and gets all stats (average rating, own rating, ..) for a task
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRatingRequest"
      responses:
        "200":
          $ref: "#/components/responses/TaskRatingResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/submissions:
    # implementation in  api/app/submission.go:467:1
    get:
      summary: Query submissions in a course
      tags: 

        - submissions
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: query
          name: sheet_id
          schema: 
             type: integer
          required: false 
        - in: query
          name: task_id
          schema: 
             type: integer
          required: false 
        - in: query
          name: group_id
          schema: 
             type: integer
          required: false 
        - in: query
          name: user_id
          schema: 
             type: integer
          required: false 
      responses:
        "200":
          $ref: "#/components/responses/SubmissionResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/points:
    # implementation in  api/app/course.go:539:1
    get:
      summary: get all points for the request identity
      tags: 

        - courses
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/SheetPointsResponseList"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/sheets:
    # implementation in  api/app/sheet.go:61:1
    get:
      summary: get all sheets in course
      description: >
       The sheets are ordered by their names
      tags: 

        - sheets
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/SheetResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/sheet.go:94:1
    post:
      summary: create a new sheet
      tags: 

        - sheets
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SheetRequest"
      responses:
        "204":
          $ref: "#/components/responses/SheetResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/grades/summary:
    # implementation in  api/app/grade.go:359:1
    get:
      summary: Query grades in a course
      description: >
       {"sheets":[{"id":179,"name":"1"},{"id":180,"name":"2"}],"achievements":[{"user_info":{"id":42,"first_name":"Sören","last_name":"Haase","student_number":"1161"},"points":[5,0]},{"user_info":{"id":43,"first_name":"Resi","last_name":"Naser","student_number":"1000"},"points":[8,7]}]}
      tags: 

        - grades
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: query
          name: group_id
          schema: 
             type: integer
          required: false 
      responses:
        "200":
          $ref: "#/components/responses/GradeOverviewResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/materials/{material_id}/file:
    # implementation in  api/app/material.go:246:1
    get:
      summary: get the zip file of a material
      tags: 

        - materials
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: material_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ZipFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/material.go:281:1
    post:
      summary: change the zip file of a sheet
      description: >
       This endpoint will only support pdf or zip files.
      tags: 

        - materials
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: material_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Zipfile"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /me:
    # implementation in  api/app/user.go:92:1
    get:
      summary: Get own user details
      tags: 

        - users
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    # implementation in  api/app/user.go:198:1
    put:
      summary: updating a the user record of the request identity
      tags: 

        - users
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserMeRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /auth/request_password_reset:
    # implementation in  api/app/auth.go:267:1
    post:
      summary: will send an email with password reset link
      tags: 

        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ResetPasswordRequest"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/BadRequest"
  /account/exams/enrollments:
    # implementation in  api/app/account.go:373:1
    get:
      summary: Retrieve the specific account avatar from the request identity
      tags: 

        - account
      responses:
        "200":
          $ref: "#/components/responses/ExamEnrollmentResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /courses/{course_id}/groups/{group_id}/enrollments:
    # implementation in  api/app/group.go:303:1
    get:
      summary: list all courses
      tags: 

        - enrollments
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
        - in: query
          name: roles
          schema: 
             type: string
          required: false 
        - in: query
          name: first_name
          schema: 
             type: string
          required: false 
        - in: query
          name: last_name
          schema: 
             type: string
          required: false 
        - in: query
          name: email
          schema: 
             type: string
          required: false 
        - in: query
          name: subject
          schema: 
             type: string
          required: false 
        - in: query
          name: language
          schema: 
             type: string
          required: false 
      responses:
        "200":
          $ref: "#/components/responses/EnrollmentResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/group.go:355:1
    post:
      summary: will assign a given user to a group or change the group assignment
      tags: 

        - groups
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupEnrollmentRequest"
      responses:
        "204":
          $ref: "#/components/responses/NotContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/grades/missing:
    # implementation in  api/app/grade.go:398:1
    get:
      summary: the missing grades for the request identity
      tags: 

        - grades
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: query
          name: group_id
          schema: 
             type: integer
          required: false 
      responses:
        "200":
          $ref: "#/components/responses/MissingGradeResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /auth/confirm_email:
    # implementation in  api/app/auth.go:366:1
    post:
      summary: handles the confirmation link and activate an account
      tags: 

        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ConfirmEmailRequest"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/BadRequest"
  /ping:
    # implementation in  api/app/common.go:52:1
    get:
      summary: heartbeat of backend
      tags: 

        - common
      responses:
        "200":
          $ref: "#/components/responses/PongResponse"
  /courses/{course_id}/materials/{material_id}:
    # implementation in  api/app/material.go:146:1
    get:
      summary: get a specific material
      description: >
       Kind means 0: slide, 1: supplementary
      tags: 

        - materials
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: material_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/MaterialResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/material.go:185:1
    put:
      summary: update a specific material
      description: >
       Kind means 0: slide, 1: supplementary
      tags: 

        - materials
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: material_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaterialRequest"
      responses:
        "204":
          $ref: "#/components/responses/NotContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/material.go:223:1
    delete:
      summary: delete a specific material
      tags: 

        - materials
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: material_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/tasks/{task_id}/public_file:
    # implementation in  api/app/task.go:253:1
    get:
      summary: get the zip with the testing framework for the public tests
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ZipFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/task.go:308:1
    post:
      summary: change the zip with the testing framework for the public tests
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Zipfile"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /account/avatar:
    # implementation in  api/app/account.go:261:1
    get:
      summary: Retrieve the specific account avatar from the request identity
      description: >
       If there is an avatar for this specific user, this will return the image otherwise it will use a default image. We currently support only jpg images.
      tags: 

        - account
      responses:
        "200":
          $ref: "#/components/responses/ImageFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    # implementation in  api/app/account.go:288:1
    post:
      summary: Change the specific account avatar of the request identity
      description: >
       We currently support only jpg, jpeg,png images.
      tags: 

        - account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Imagefile"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    # implementation in  api/app/account.go:321:1
    delete:
      summary: Delete the specific account avatar of the request identity
      description: >
       This is necessary, when a user wants to switch back to a default avatar.
      tags: 

        - account
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /courses/{course_id}/groups:
    # implementation in  api/app/group.go:66:1
    get:
      summary: get all groups in course
      description: >
       The ordering is abitary
      tags: 

        - groups
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/GroupResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/group.go:96:1
    post:
      summary: create a new group
      tags: 

        - groups
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRequest"
      responses:
        "204":
          $ref: "#/components/responses/SheetResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/materials:
    # implementation in  api/app/material.go:61:1
    get:
      summary: get all materials in course
      description: >
       The materials are ordered by the lecture date. Kind means 0: slide, 1: supplementary
      tags: 

        - materials
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/MaterialResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/material.go:95:1
    post:
      summary: create a new material
      description: >
       Kind means 0: slide, 1: supplementary
      tags: 

        - materials
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/MaterialRequest"
      responses:
        "204":
          $ref: "#/components/responses/MaterialResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/exams/{exam_id}/enrollments:
    # implementation in  api/app/exam.go:211:1
    post:
      summary: enroll a user into a exam
      tags: 

        - exams
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: exam_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Empty"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/exam.go:254:1
    delete:
      summary: disenroll a user from a exam
      tags: 

        - exams
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: exam_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/exam.go:296:1
    get:
      summary: Retrieve the specific account avatar from the request identity
      tags: 

        - exams
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: exam_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ExamEnrollmentResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    # implementation in  api/app/exam.go:326:1
    put:
      summary: enroll a user into a exam
      tags: 

        - exams
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: exam_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserExamRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/sheets/{sheet_id}:
    # implementation in  api/app/sheet.go:141:1
    get:
      summary: get a specific sheet
      tags: 

        - sheets
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/SheetResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/sheet.go:166:1
    put:
      summary: update a specific sheet
      tags: 

        - sheets
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/SheetRequest"
      responses:
        "204":
          $ref: "#/components/responses/NotContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/sheet.go:202:1
    delete:
      summary: delete a specific sheet
      tags: 

        - sheets
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /auth/update_password:
    # implementation in  api/app/auth.go:320:1
    post:
      summary: sets a new password
      tags: 

        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UpdatePasswordRequest"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/BadRequest"
  /account/enrollments:
    # implementation in  api/app/account.go:347:1
    get:
      summary: Retrieve the specific account avatar from the request identity
      tags: 

        - account
      responses:
        "200":
          $ref: "#/components/responses/UserEnrollmentResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /courses/{course_id}/tasks/{task_id}/groups/{group_id}:
    # implementation in  api/app/submission.go:112:1
    get:
      summary: get the path to the zip file containing all submissions for a given task and a given group if exists
      tags: 

        - submissions
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ZipFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /users/{user_id}/emails:
    # implementation in  api/app/user.go:301:1
    post:
      summary: send email to a specific user
      tags: 

        - users
        - email
      parameters:
        - in: path
          name: user_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailRequest"
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /courses:
    # implementation in  api/app/course.go:61:1
    get:
      summary: list all courses
      tags: 

        - courses
      responses:
        "200":
          $ref: "#/components/responses/CourseResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/course.go:86:1
    post:
      summary: create a new course
      tags: 

        - courses
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseRequest"
      responses:
        "204":
          $ref: "#/components/responses/CourseResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/sheets/{sheet_id}/points:
    # implementation in  api/app/sheet.go:276:1
    get:
      summary: return all points from a sheet for the request identity
      tags: 

        - sheets
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/NewTaskListResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /users/{user_id}/avatar:
    # implementation in  api/app/user.go:173:1
    get:
      summary: Get user details
      tags: 

        - users
      parameters:
        - in: path
          name: user_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /version:
    # implementation in  api/app/common.go:62:1
    get:
      summary: all version information
      tags: 

        - common
      responses:
        "200":
          $ref: "#/components/responses/VersionResponse"
  /courses/{course_id}/submissions/{submission_id}/file:
    # implementation in  api/app/submission.go:230:1
    get:
      summary: get the zip file of a specific submission
      tags: 

        - submissions
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: submission_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ZipFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/tasks/{task_id}:
    # implementation in  api/app/task.go:169:1
    get:
      summary: get a specific task
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/TaskResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/task.go:194:1
    put:
      summary: edit a specific task
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
      responses:
        "204":
          $ref: "#/components/responses/NotContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/task.go:230:1
    delete:
      summary: delete a specific task
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /privacy_statement:
    # implementation in  api/app/common.go:78:1
    get:
      summary: the privacy statement
      tags: 

        - common
      responses:
        "200":
          $ref: "#/components/responses/RawResponse"
  /courses/{course_id}/groups/{group_id}/emails:
    # implementation in  api/app/group.go:472:1
    post:
      summary: send email to entire group
      tags: 

        - groups
        - email
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/grades/{grade_id}:
    # implementation in  api/app/grade.go:62:1
    put:
      summary: edit a grade
      tags: 

        - grades
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: grade_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GradeRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/grade.go:109:1
    get:
      summary: get a grade
      tags: 

        - grades
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: grade_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/GradeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/emails:
    # implementation in  api/app/course.go:482:1
    post:
      summary: send email to entire course filtered
      tags: 

        - courses
        - email
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: query
          name: roles
          schema: 
             type: string
          required: false 
        - in: query
          name: first_name
          schema: 
             type: string
          required: false 
        - in: query
          name: last_name
          schema: 
             type: string
          required: false 
        - in: query
          name: email
          schema: 
             type: string
          required: false 
        - in: query
          name: subject
          schema: 
             type: string
          required: false 
        - in: query
          name: language
          schema: 
             type: string
          required: false 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/EmailRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/tasks/{task_id}/private_file:
    # implementation in  api/app/task.go:280:1
    get:
      summary: get the zip with the testing framework for the private tests
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ZipFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/task.go:332:1
    post:
      summary: change the zip with the testing framework for the private tests
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Zipfile"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /users/{user_id}:
    # implementation in  api/app/user.go:144:1
    get:
      summary: Get user details
      tags: 

        - users
      parameters:
        - in: path
          name: user_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    # implementation in  api/app/user.go:244:1
    put:
      summary: updating a specific user with given id.
      tags: 

        - users
      parameters:
        - in: path
          name: user_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    # implementation in  api/app/user.go:338:1
    delete:
      summary: updating a specific user with given id.
      tags: 

        - users
      parameters:
        - in: path
          name: user_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/UserRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /account:
    # implementation in  api/app/account.go:64:1
    post:
      summary: Create a new user account to register on the site.
      description: >
       The account will be created and a confirmation email will be sent. There is no way to set an avatar here and root will be false by default.
      tags: 

        - account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CreateUserAccountRequest"
      responses:
        "201":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/account.go:151:1
    patch:
      summary: Updates email or password
      description: >
       This is the only endpoint having PATCH as the backend will automatically only update fields which are non-empty. If both are given, it will update both fields. If the email should be changed a new confirmation email will be sent and clicking on the confirmation link is required to login again.
      tags: 

        - account
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/AccountRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    # implementation in  api/app/account.go:235:1
    get:
      summary: Retrieve the specific user account from the requesting identity.
      description: >
       It will contain all information as this can only query the own account
      tags: 

        - account
      responses:
        "200":
          $ref: "#/components/responses/UserResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /courses/{course_id}/tasks/{task_id}/groups/{group_id}/file:
    # implementation in  api/app/submission.go:173:1
    get:
      summary: get the zip file containing all submissions for a given task and a given group
      tags: 

        - submissions
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ZipFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/groups/{group_id}:
    # implementation in  api/app/group.go:147:1
    get:
      summary: get a specific group
      tags: 

        - groups
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/GroupResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/group.go:240:1
    put:
      summary: update a specific group
      tags: 

        - groups
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupRequest"
      responses:
        "204":
          $ref: "#/components/responses/NotContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/group.go:274:1
    delete:
      summary: delete a specific group
      tags: 

        - groups
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/groups/{group_id}/bids:
    # implementation in  api/app/group.go:408:1
    post:
      summary: change or add the bid for enrolling in a group
      tags: 

        - groups
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: group_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GroupBidRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/grades/{grade_id}/public_result:
    # implementation in  api/app/grade.go:134:1
    post:
      summary: update information for grade from background worker
      tags: 

        - internal
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: grade_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GradeFromWorkerRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/exams/{exam_id}:
    # implementation in  api/app/exam.go:127:1
    get:
      summary: get a specific exam
      tags: 

        - exams
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: exam_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ExamResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/exam.go:152:1
    put:
      summary: update a specific exam
      tags: 

        - exams
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: exam_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ExamResponse"
      responses:
        "204":
          $ref: "#/components/responses/NotContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/exam.go:187:1
    delete:
      summary: delete a specific exam
      tags: 

        - exams
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: exam_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/tasks/{task_id}/submission:
    # implementation in  api/app/submission.go:65:1
    get:
      summary: get the zip file containing the submission of the request identity for a given task
      tags: 

        - submissions
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ZipFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/submission.go:276:1
    post:
      summary: changes the zip file of a submission belonging to the request identity
      tags: 

        - submissions
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Zipfile"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/groups/own:
    # implementation in  api/app/group.go:176:1
    get:
      summary: get the group the request identity is enrolled in
      tags: 

        - groups
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/GroupResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/grades/{grade_id}/private_result:
    # implementation in  api/app/grade.go:208:1
    post:
      summary: update information for grade from background worker
      tags: 

        - internal
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: grade_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/GradeFromWorkerRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/tasks/missing:
    # implementation in  api/app/task.go:88:1
    get:
      summary: Get all tasks which are not solved by the request identity
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/MissingTaskResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /users/find:
    # implementation in  api/app/user.go:118:1
    get:
      summary: Query a specific user
      tags: 

        - users
      parameters:
        - in: query
          name: query
          schema: 
             type: string
          required: false 
      responses:
        "200":
          $ref: "#/components/responses/UserResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /courses/{course_id}/grades:
    # implementation in  api/app/grade.go:296:1
    get:
      summary: Query grades in a course
      tags: 

        - grades
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: query
          name: sheet_id
          schema: 
             type: integer
          required: false 
        - in: query
          name: task_id
          schema: 
             type: integer
          required: false 
        - in: query
          name: group_id
          schema: 
             type: integer
          required: false 
        - in: query
          name: user_id
          schema: 
             type: integer
          required: false 
        - in: query
          name: tutor_id
          schema: 
             type: integer
          required: false 
        - in: query
          name: feedback
          schema: 
             type: string
          required: false 
        - in: query
          name: acquired_points
          schema: 
             type: integer
          required: false 
        - in: query
          name: public_test_status
          schema: 
             type: integer
          required: false 
        - in: query
          name: private_test_status
          schema: 
             type: integer
          required: false 
        - in: query
          name: public_execution_state
          schema: 
             type: integer
          required: false 
        - in: query
          name: private_execution_state
          schema: 
             type: integer
          required: false 
      responses:
        "200":
          $ref: "#/components/responses/GradeResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/tasks/{task_id}/result:
    # implementation in  api/app/task.go:355:1
    get:
      summary: the the public results (grades) for a test and the request identity
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: task_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/GradeResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/sheets/{sheet_id}/file:
    # implementation in  api/app/sheet.go:225:1
    get:
      summary: get the zip file of a sheet
      tags: 

        - sheets
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/ZipFile"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/sheet.go:254:1
    post:
      summary: change the zip file of a sheet
      tags: 

        - sheets
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Zipfile"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}:
    # implementation in  api/app/course.go:130:1
    get:
      summary: get a specific course
      tags: 

        - courses
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/CourseResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/course.go:158:1
    put:
      summary: update a specific course
      tags: 

        - courses
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/CourseRequest"
      responses:
        "204":
          $ref: "#/components/responses/NotContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/course.go:195:1
    delete:
      summary: delete a specific course
      tags: 

        - courses
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/enrollments/{user_id}:
    # implementation in  api/app/course.go:298:1
    get:
      summary: give enrollment of a specific user in a specific course
      tags: 

        - enrollments
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: user_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/EnrollmentResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/course.go:333:1
    delete:
      summary: give enrollment of a specific user in a specific course
      tags: 

        - enrollments
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: user_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/course.go:371:1
    put:
      summary: change role of specific user
      tags: 

        - enrollments
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: user_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/ChangeRoleInCourseRequest"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /courses/{course_id}/sheets/{sheet_id}/tasks:
    # implementation in  api/app/task.go:60:1
    get:
      summary: Get all tasks of a given sheet
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
      responses:
        "200":
          $ref: "#/components/responses/TaskResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
    # implementation in  api/app/task.go:121:1
    post:
      summary: create a new task
      tags: 

        - tasks
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: path
          name: sheet_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/TaskRequest"
      responses:
        "204":
          $ref: "#/components/responses/TaskResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /auth/token:
    # implementation in  api/app/auth.go:67:1
    post:
      summary: Refresh or Generate Access token
      description: >
       This endpoint will generate the access token without login credentials if the refresh token is given.
      tags: 

        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "201":
          $ref: "#/components/responses/AuthResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
  /auth/sessions:
    # implementation in  api/app/auth.go:187:1
    post:
      summary: Start a session
      description: >
       This endpoint will generate the access token without login credentials if the refresh token is given.
      tags: 

        - auth
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/LoginRequest"
      responses:
        "200":
          $ref: "#/components/responses/LoginResponse"
        "400":
          $ref: "#/components/responses/BadRequest"
    # implementation in  api/app/auth.go:254:1
    delete:
      summary: Destroy a session
      tags: 

        - auth
      responses:
        "200":
          $ref: "#/components/responses/OK"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
  /courses/{course_id}/enrollments:
    # implementation in  api/app/course.go:232:1
    get:
      summary: list all courses
      description: >
       If the query 'q' parameter is given this endpoints returns all users which matches the query by first_name, last_name or email. The 'q' does not need be wrapped by '%'. But all other query strings do need to be wrapped by '%' to indicated end and start of a string.
      tags: 

        - enrollments
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
        - in: query
          name: roles
          schema: 
             type: string
          required: false 
        - in: query
          name: first_name
          schema: 
             type: string
          required: false 
        - in: query
          name: last_name
          schema: 
             type: string
          required: false 
        - in: query
          name: email
          schema: 
             type: string
          required: false 
        - in: query
          name: subject
          schema: 
             type: string
          required: false 
        - in: query
          name: language
          schema: 
             type: string
          required: false 
        - in: query
          name: q
          schema: 
             type: string
          required: false 
      responses:
        "200":
          $ref: "#/components/responses/EnrollmentResponseList"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/course.go:404:1
    post:
      summary: enroll a user into a course
      tags: 

        - enrollments
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Empty"
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
    # implementation in  api/app/course.go:444:1
    delete:
      summary: disenroll a user from a course
      tags: 

        - enrollments
      parameters:
        - in: path
          name: course_id
          schema: 
             type: integer
          required: true 
      responses:
        "204":
          $ref: "#/components/responses/NoContent"
        "400":
          $ref: "#/components/responses/BadRequest"
        "401":
          $ref: "#/components/responses/Unauthenticated"
        "403":
          $ref: "#/components/responses/Unauthorized"
